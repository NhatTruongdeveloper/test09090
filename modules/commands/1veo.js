const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

module.exports.config = {
  name: "veo",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "pcoder", // Gi·ªØ nguy√™n ho·∫∑c c·∫≠p nh·∫≠t n·∫øu c·∫ßn
  description: "T·∫°o video AI b·∫±ng Gemini Veo (Google)", // S·ª≠a "Veo2" th√†nh "Veo" n·∫øu ƒë√≥ l√† t√™n ch√≠nh th·ª©c, ho·∫∑c gi·ªØ nguy√™n n·∫øu ƒë√∫ng
  commandCategory: "ai",
  usages: "veo [prompt]",
  cooldowns: 15, // Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn s·ª≠ d·ª•ng l·ªánh
  dependencies: {
    "axios": "",
    "fs-extra": ""
  }
};

// H√†m ti·ªán √≠ch ƒë·ªÉ th√™m s·ªë 0 v√†o tr∆∞·ªõc s·ªë c√≥ m·ªôt ch·ªØ s·ªë (v√≠ d·ª•: 7 -> 07)
function pad(num) {
  return num < 10 ? '0' + num : num;
}

module.exports.run = async ({ api, event, args }) => {
  const apikey = ""; // <--- QUAN TR·ªåNG: THAY API KEY C·ª¶A B·∫†N ·ªû ƒê√ÇY
  const prompt = args.join(" ").trim();

  if (!prompt) {
    return api.sendMessage("üìù Vui l√≤ng nh·∫≠p prompt m√¥ t·∫£ video AI mu·ªën t·∫°o.\nV√≠ d·ª•: veo m·ªôt ch√∫ m√®o ƒëang nh·∫£y m√∫a tr√™n c·ªè", event.threadID, event.messageID);
  }

  const cacheDir = path.join(__dirname, "cache");
  await fs.ensureDir(cacheDir); // ƒê·∫£m b·∫£o th∆∞ m·ª•c 'cache' t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ t·∫°o n√≥

  const timeStart = Date.now();
  let filePath;
  let waitMsg; // Khai b√°o waitMsg ·ªü ƒë√¢y ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p trong catch block n·∫øu c·∫ßn

  try {
    waitMsg = await api.sendMessage("ü§ñ ƒêang t·∫°o video AI b·∫±ng Gemini Veo, vui l√≤ng ch·ªù trong gi√¢y l√°t...", event.threadID);

    // **L∆ØU √ù QUAN TR·ªåNG V·ªÄ API GEMINI VEO:**
    // 1. Endpoint URL: 'https://generativelanguage.googleapis.com/v1beta/models/veo:generateVideo'
    //    C·∫ßn x√°c minh l·∫°i endpoint ch√≠nh x√°c t·ª´ t√†i li·ªáu ch√≠nh th·ª©c c·ªßa Google cho Gemini Veo.
    //    "veo2" c√≥ th·ªÉ ch∆∞a ch√≠nh x√°c ho·∫∑c l√† m·ªôt phi√™n b·∫£n c·ª• th·ªÉ.
    // 2. C·∫•u tr√∫c Request Body:
    //    { prompt: prompt, resolution: "720p", duration_seconds: 8 }
    //    C·∫•u tr√∫c n√†y c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh theo t√†i li·ªáu API (v√≠ d·ª•: c√°c tham s·ªë c√≥ th·ªÉ n·∫±m trong m·ªôt object 'parameters' ho·∫∑c 'input').
    // 3. X√°c th·ª±c: Header 'x-goog-api-key' l√† ph·ªï bi·∫øn, nh∆∞ng h√£y ki·ªÉm tra k·ªπ.
    // 4. C∆° ch·∫ø ho·∫°t ƒë·ªông: API t·∫°o video c√≥ th·ªÉ ho·∫°t ƒë·ªông b·∫•t ƒë·ªìng b·ªô (asynchronous).
    //    T·ª©c l√†, y√™u c·∫ßu ƒë·∫ßu ti√™n c√≥ th·ªÉ tr·∫£ v·ªÅ m·ªôt ID t√°c v·ª• (operation ID).
    //    Sau ƒë√≥, b·∫°n c·∫ßn d√πng ID n√†y ƒë·ªÉ ki·ªÉm tra (poll) tr·∫°ng th√°i ho√†n th√†nh v√† l·∫•y URL video.
    //    ƒêo·∫°n code hi·ªán t·∫°i gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ URL video tr·ª±c ti·∫øp v√† ƒë·ªìng b·ªô. N·∫øu kh√¥ng ph·∫£i v·∫≠y, logic c·∫ßn thay ƒë·ªïi ƒë√°ng k·ªÉ.

    const res = await axios.post("https://generativelanguage.googleapis.com/v1beta/models/veo:generateVideo", { // Gi·∫£ s·ª≠ 'veo' l√† model ID
      prompt: prompt,
      // C√°c tham s·ªë kh√°c c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh d·ª±a tr√™n t√†i li·ªáu API c·ªßa Gemini Veo
      // v√≠ d·ª•:
      // generation_config: {
      //   resolution: "720p",
      //   duration_seconds: 8
      // }
      // Ho·∫∑c t∆∞∆°ng t·ª±
    }, {
      headers: {
        "Content-Type": "application/json",
        "x-goog-api-key": apikey
      },
      timeout: 180000 // TƒÉng timeout l√™n 3 ph√∫t, t·∫°o video c√≥ th·ªÉ m·∫•t th·ªùi gian
    });

    // **L∆ØU √ù V·ªÄ PH·∫¢N H·ªíI T·ª™ API:**
    // C·∫ßn ki·ªÉm tra c·∫•u tr√∫c `res.data` th·ª±c t·∫ø m√† API Gemini Veo tr·∫£ v·ªÅ.
    // `res.data.videoUrl` l√† m·ªôt ph·ªèng ƒëo√°n. N√≥ c√≥ th·ªÉ l√† `res.data.generatedVideo.url`,
    // `res.data.outputs[0].video.url` ho·∫∑c m·ªôt c·∫•u tr√∫c kh√°c.
    if (!res.data || !res.data.videoUrl) { // C·∫ßn ƒëi·ªÅu ch·ªânh d·ª±a tr√™n c·∫•u tr√∫c response th·ª±c t·∫ø
      if (waitMsg) api.unsendMessage(waitMsg.messageID);
      api.sendMessage("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ video t·ª´ Gemini. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ki·ªÉm tra API key/quota v√† c·∫•u tr√∫c ph·∫£n h·ªìi c·ªßa API.", event.threadID, event.messageID);
      return;
    }
    const videoUrl = res.data.videoUrl; // ƒêi·ªÅu ch·ªânh n·∫øu c·∫ßn

    // T·∫£i video v·ªÅ
    const fileName = `gemini-veo-${Date.now()}.mp4`;
    filePath = path.join(cacheDir, fileName);
    const writer = fs.createWriteStream(filePath);

    const videoRes = await axios({
      url: videoUrl,
      method: "GET",
      responseType: "stream"
    });

    videoRes.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', (err) => {
        if (waitMsg) api.unsendMessage(waitMsg.messageID);
        reject(err);
      });
    });

    const now = new Date();
    const h = pad(now.getHours());
    const p = pad(now.getMinutes());
    const s = pad(now.getSeconds());
    const gio = now.toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone: 'Asia/Ho_Chi_Minh' });


    const body = `üé¨ Video AI Gemini Veo ‚ú®
üìù Prompt: ${prompt}
‚è∞ Th·ªùi gian t·∫°o: ${h} gi·ªù ${p} ph√∫t ${s} gi√¢y
üìÖ Ng√†y: ${gio}
‚è±Ô∏è X·ª≠ l√Ω trong: ${(Date.now() - timeStart) / 1000} gi√¢y
ü§ñ Powered by Gemini (Google AI Video)`;

    api.sendMessage({
      body,
      attachment: fs.createReadStream(filePath)
    }, event.threadID, () => {
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath); // X√≥a file sau khi g·ª≠i
      }
      if (waitMsg) api.unsendMessage(waitMsg.messageID); // X√≥a tin nh·∫Øn ch·ªù
    }, event.messageID);

  } catch (e) {
    console.error("L·ªói khi t·∫°o video AI Gemini:", e);
    if (waitMsg) api.unsendMessage(waitMsg.messageID);
    if (filePath && fs.existsSync(filePath)) {
      fs.unlinkSync(filePath); // X√≥a file t·∫°m n·∫øu c√≥ l·ªói
    }
    let errMsg = "‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o video AI Gemini.";
    if (e.response) {
        // L·ªói t·ª´ API c·ªßa Google
        console.error("API Error Data:", e.response.data);
        console.error("API Error Status:", e.response.status);
        const googleError = e.response.data?.error?.message || "Kh√¥ng c√≥ th√¥ng ƒëi·ªáp l·ªói c·ª• th·ªÉ t·ª´ API.";
        errMsg += `\nL·ªói API: ${googleError} (Status: ${e.response.status})`;
        if (e.response.status === 403) {
            errMsg += "\nKi·ªÉm tra l·∫°i API Key v√† quy·ªÅn truy c·∫≠p Google Cloud Project c·ªßa b·∫°n.";
        } else if (e.response.status === 400) {
            errMsg += "\nC√≥ th·ªÉ prompt ho·∫∑c c√°c tham s·ªë kh√¥ng h·ª£p l·ªá. Ki·ªÉm tra l·∫°i t√†i li·ªáu API.";
        } else if (e.response.status === 429) {
            errMsg += "\nƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n quota c·ªßa API. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    } else if (e.request) {
        // Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
        errMsg += "\nKh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß API. Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c URL API.";
    } else {
        // L·ªói kh√°c
        errMsg += `\nChi ti·∫øt: ${e.message}`;
    }
    api.sendMessage(errMsg, event.threadID, event.messageID);
  }
};