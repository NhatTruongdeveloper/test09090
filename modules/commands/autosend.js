const moment = require('moment-timezone');
const weather = require('weather-js');

module.exports.config = {
  name: 'thoitiet',
  version: '13.1',
  hasPermission: 0,
  credits: 'pcoder',
  description: 'T·ª± ƒë·ªông g·ª≠i th·ªùi ti·∫øt + l·ªùi ch√∫c/th√≠nh theo t·ª´ng khung gi·ªù ƒë√£ ƒë·ªãnh d·∫°ng! G√µ "th·ªùi ti·∫øt" kh√¥ng c·∫ßn prefix c≈©ng nh·∫≠n.',
  commandCategory: 'Ti·ªán √≠ch & Admin',
  usages: '[t·ªânh/th√†nh ph·ªë] (b·ªè tr·ªëng: random)',
  cooldowns: 3,
};

const provinces = [
  "B·∫Øc Ninh", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng", "C·∫ßn Th∆°", "H·∫£i D∆∞∆°ng", "H√† N·ªôi",
  "Qu·∫£ng Ninh", "Th√°i B√¨nh", "Nam ƒê·ªãnh", "Ninh B√¨nh", "Th√°i Nguy√™n", "Ph√∫ Th·ªç", "Vƒ©nh Ph√∫c",
  "B·∫Øc Giang", "L·∫°ng S∆°n", "Qu·∫£ng B√¨nh", "Qu·∫£ng Tr·ªã", "Th·ª´a Thi√™n Hu·∫ø", "Qu·∫£ng Nam", "Qu·∫£ng Ng√£i",
  "B√¨nh ƒê·ªãnh", "Ph√∫ Y√™n", "Kh√°nh H√≤a", "Ninh Thu·∫≠n", "B√¨nh Thu·∫≠n", "Kon Tum", "Gia Lai", "ƒê·∫Øk L·∫Øk",
  "ƒê·∫Øk N√¥ng", "L√¢m ƒê·ªìng", "B√¨nh Ph∆∞·ªõc", "T√¢y Ninh", "B√¨nh D∆∞∆°ng", "ƒê·ªìng Nai", "Long An", "ƒê·ªìng Th√°p",
  "Ti·ªÅn Giang", "An Giang", "B√† R·ªãa - V≈©ng T√†u", "B·∫øn Tre", "B·∫°c Li√™u", "C√† Mau", "H·∫≠u Giang",
  "Ki√™n Giang", "S√≥c TrƒÉng", "Tr√† Vinh", "Vƒ©nh Long", "Thanh H√≥a"
];

const weatherEmoji = {
  N·∫Øng: "‚òÄÔ∏è",
  M√¢y: "‚õÖ",
  "M√¢y m·ªôt ph·∫ßn": "üå§Ô∏è",
  "M√¢y r·∫•t nhi·ªÅu": "üå•Ô∏è",
  M∆∞a: "üåßÔ∏è",
  "M∆∞a nh·∫π": "üå¶Ô∏è",
  B√£o: "‚õàÔ∏è",
  Tuy·∫øt: "‚ùÑÔ∏è",
  "S∆∞∆°ng m√π": "üå´Ô∏è",
  "Tr·ªùi trong": "üåÑ",
  "Tr·ªùi trong r·∫•t nhi·ªÅu": "üåÑ"
};

const randomMsg = [
  "üåû Ch√∫c c√°c b·∫°n m·ªôt ng√†y m·ªõi tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng!",
  "üíß U·ªëng n∆∞·ªõc v√† b·∫£o v·ªá s·ª©c kho·∫ª nh√©!",
  "üí° ƒê·ª´ng qu√™n ngh·ªâ ng∆°i h·ª£p l√Ω gi·ªØa c√°c gi·ªù l√†m vi·ªác nh√©!",
  "üå§Ô∏è Ch√∫c m·ªçi ng∆∞·ªùi lu√¥n b√¨nh an v√† g·∫∑p nhi·ªÅu may m·∫Øn!",
  "‚òòÔ∏è H√£y t·∫≠n h∆∞·ªüng t·ª´ng kho·∫£nh kh·∫Øc c·ªßa cu·ªôc s·ªëng!",
  "üçÄ Ch√∫c m·ªçi ng∆∞·ªùi c√≥ m·ªôt ng√†y tuy·ªát v·ªùi!",
  "üåà ƒê·ª´ng qu√™n m·ªâm c∆∞·ªùi b·∫°n nh√©!"
];

function skytextToVN(sky) {
  const dic = {
    "Cloudy": "M√¢y",
    "Sunny": "N·∫Øng",
    "Partly Cloudy": "M√¢y m·ªôt ph·∫ßn",
    "Mostly Cloudy": "M√¢y r·∫•t nhi·ªÅu",
    "Rain": "M∆∞a",
    "Thunderstorm": "B√£o",
    "Snow": "Tuy·∫øt",
    "Fog": "S∆∞∆°ng m√π",
    "Haze": "S∆∞∆°ng m√π",
    "Clear": "Tr·ªùi trong",
    "Light Rain": "M∆∞a nh·∫π",
    "Mostly Clear": "Tr·ªùi trong r·∫•t nhi·ªÅu"
  };
  return dic[sky] || sky;
}
function windToVN(wind) {
  const dic = {
    "Northeast": "H∆∞·ªõng ƒê√¥ng B·∫Øc",
    "Northwest": "H∆∞·ªõng T√¢y B·∫Øc",
    "Southeast": "H∆∞·ªõng ƒê√¥ng Nam",
    "Southwest": "H∆∞·ªõng T√¢y Nam",
    "East": "H∆∞·ªõng ƒê√¥ng",
    "West": "H∆∞·ªõng T√¢y",
    "North": "H∆∞·ªõng B·∫Øc",
    "South": "H∆∞·ªõng Nam"
  };
  return dic[wind] || wind;
}
function dayToVN(day) {
  const dic = {
    "Friday": "Th·ª© 6",
    "Saturday": "Th·ª© 7",
    "Sunday": "Ch·ªß nh·∫≠t",
    "Monday": "Th·ª© 2",
    "Tuesday": "Th·ª© 3",
    "Wednesday": "Th·ª© 4",
    "Thursday": "Th·ª© 5"
  };
  return dic[day] || day;
}
function formatDate(date) {
  if (!date) return "";
  const [y, m, d] = date.split("-");
  return `Ng√†y ${d}-${m}-${y}`;
}

const scheduleTimes = [
  "00:00:00","00:30:00","01:00:00","01:30:00","02:00:00","02:30:00","03:00:00","03:30:00",
  "04:00:00","04:30:00","05:00:00","05:30:00","06:00:00","06:30:00","07:00:00","07:30:00",
  "08:00:00","08:30:00","09:00:00","09:30:00","10:00:00","10:30:00","11:00:00","11:30:00",
  "12:00:00","12:30:00","13:00:00","13:30:00","14:00:00","14:30:00","15:00:00","15:30:00",
  "16:00:00","16:30:00","17:00:00","17:30:00","18:00:00","18:30:00","19:00:00","19:30:00",
  "20:00:00","20:30:00","21:00:00","21:30:00","22:00:00","22:30:00","23:00:00","23:30:00"
];

const findWeather = (city, degreeType = 'C') => {
  return new Promise((resolve, reject) => {
    weather.find({ search: city, degreeType }, (err, result) => {
      if (err) reject(err);
      else resolve(result);
    });
  });
};

async function getWeatherMsg(city) {
  let thoitiet = "";
  try {
    const result = await findWeather(city);
    if (!result || !result[0] || !result[0].current) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c th·ªùi ti·∫øt");
    const cur = result[0].current;
    const loc = result[0].location;
    const sky = skytextToVN(cur.skytext);
    const eIcon = weatherEmoji[sky] || "üåà";
    const wind = windToVN(cur.winddisplay.split(" ")[2] || "");
    const dayVN = dayToVN(cur.day);
    const dateVN = formatDate(cur.date);
    const gio = moment().tz("Asia/Ho_Chi_Minh").format("HH:mm:ss || DD/MM/YYYY");
    thoitiet = `${eIcon} ùó®ùóΩùòÅùó∂ùó∫ùó≤: ${gio}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üó∫Ô∏è ƒê·ªãa ƒëi·ªÉm: ${loc.name}
üå° Nhi·ªát ƒë·ªô: ${cur.temperature}¬∞${loc.degreetype}
üõ∞  M√¥ t·∫£: ${sky}
‚ôí ƒê·ªô ·∫©m: ${cur.humidity}%
üí® Gi√≥: ${cur.windspeed} ${wind}
‚è∞ Ghi nh·∫≠n v√†o: ${cur.observationtime}
üó∫Ô∏è Tr·∫°m: ${cur.observationpoint}
üìÖ ${dayVN} - ${dateVN}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üîÑ ƒê√¢y l√† tin nh·∫Øn t·ª± ƒë·ªông c·∫≠p nh·∫≠t th·ªùi ti·∫øt!`;
  } catch (e) {
    thoitiet = "‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin th·ªùi ti·∫øt m·ªõi nh·∫•t!";
  }
  // Th√™m ch√∫c random
  const msgChuc = randomMsg[Math.floor(Math.random() * randomMsg.length)];
  return `${thoitiet}\n${msgChuc}`;
}

// T·ª± ƒë·ªông g·ª≠i th·ªùi ti·∫øt theo l·ªãch
module.exports.onLoad = ({ api }) => {
  let lastSentTime = "";
  setInterval(async () => {
    const now = moment().tz('Asia/Ho_Chi_Minh');
    const timeStr = now.format('HH:mm:ss');
    if (scheduleTimes.includes(timeStr) && lastSentTime !== timeStr) {
      lastSentTime = timeStr;
      const allThreads = global.data.allThreadID || [];
      if (!Array.isArray(allThreads) || allThreads.length === 0) return;
      const city = provinces[Math.floor(Math.random() * provinces.length)];
      const msgText = await getWeatherMsg(city);

      for (const tid of allThreads) {
        try {
          await api.sendMessage({ body: msgText }, tid);
        } catch (e) {}
      }
    }
  }, 1000);
};

// L·ªánh prefix: thoitiet [t·ªânh/th√†nh ph·ªë]
module.exports.run = async ({ api, event, args }) => {
  let city = args.join(" ").trim();
  if (!city) city = provinces[Math.floor(Math.random() * provinces.length)];
  const msgText = await getWeatherMsg(city);
  return api.sendMessage(msgText, event.threadID, event.messageID);
};

// Nh·∫≠n: "th·ªùi ti·∫øt [t·ªânh/th√†nh ph·ªë]" ho·∫∑c ch·ªâ "th·ªùi ti·∫øt"
module.exports.handleEvent = async ({ api, event }) => {
  const { body, threadID, messageID, senderID } = event;
  if (!body || senderID == api.getCurrentUserID()) return;
  const text = body.toLowerCase().trim();
  if (text.startsWith("th·ªùi ti·∫øt ") || text.startsWith("thoi tiet ")) {
    let city = body.substring(text.indexOf(" ") + 1).trim();
    if (!city) city = provinces[Math.floor(Math.random() * provinces.length)];
    const msgText = await getWeatherMsg(city);
    return api.sendMessage(msgText, threadID, messageID);
  }
  if (text === "th·ªùi ti·∫øt" || text === "thoi tiet") {
    let city = provinces[Math.floor(Math.random() * provinces.length)];
    const msgText = await getWeatherMsg(city);
    return api.sendMessage(msgText, threadID, messageID);
  }
};