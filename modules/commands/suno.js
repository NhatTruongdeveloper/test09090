const axios = require('axios');
const fs = require('fs');
const path = require('path');

const SUNO_APIKEY_PATH = path.join(__dirname, 'suno_apikey.txt');
const DEFAULT_CALLBACK = "https://example.com/suno_callback";

module.exports.config = {
    name: "suno",
    version: "1.2.0",
    hasPermssion: 2,
    credits: "Pcoder, Copilot",
    description: "T·∫°o nh·∫°c AI Suno (ch·ªâ d√πng model V3_5, c√≥ help)",
    commandCategory: "media",
    usages: `
/suno <prompt> [--callback <url>]
/suno custom <prompt> --style <style> --title <title> [--instr] [--negative <tags>] [--callback <url>]
/suno lyrics "l·ªùi b√†i h√°t" styles "style" --title <title> [--negative <tags>] [--callback <url>]
/suno apikey <key>
/suno help
- T·∫°o nh·∫°c AI Suno model 3.5 v·ªõi prompt ƒë∆°n gi·∫£n ho·∫∑c custom lyrics/style/title.
- ƒê·ªïi apikey ho·∫∑c xem h∆∞·ªõng d·∫´n chi ti·∫øt v·ªõi suno help.
    `.trim(),
    cooldowns: 8
};

function getApiKey() {
    if (fs.existsSync(SUNO_APIKEY_PATH)) {
        return fs.readFileSync(SUNO_APIKEY_PATH, "utf-8").trim();
    }
    return null;
}
function setApiKey(newKey) {
    fs.writeFileSync(SUNO_APIKEY_PATH, newKey.trim());
}

// Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n chi ti·∫øt
const helpText = `
=== SUNO MUSIC BOT HELP ===

1. Prompt ƒë∆°n gi·∫£n, nh·∫°c auto lyric:
  /suno M·ªôt b·∫£n nh·∫°c thi·∫øu nhi vui nh·ªôn
  (Ch·ªâ c·∫ßn prompt, nh·∫°c s·∫Ω t·ª± sinh l·ªùi, t·ªëi ƒëa 400 k√Ω t·ª±.)

2. Custom lyrics + style + title (nh·∫°c ƒë√∫ng lyrics b·∫°n nh·∫≠p):
  /suno lyrics "L·ªùi b√†i h√°t" styles "Pop" --title "T√™n b√†i h√°t"
  (C√≥ th·ªÉ th√™m --negative <tags> ƒë·ªÉ tr√°nh phong c√°ch n√†o ƒë√≥, --callback <url> n·∫øu mu·ªën.)

3. Custom mode ƒë·∫ßy ƒë·ªß (ch·ªçn instrumental ho·∫∑c c√≥ l·ªùi):
  /suno custom <prompt ho·∫∑c lyrics> --style <th·ªÉ lo·∫°i> --title <t√™n> [--instr] [--negative <tags>] [--callback <url>]

  - N·∫øu c√≥ --instr: ch·ªâ c·∫ßn style + title (prompt b·ªè qua, nh·∫°c kh√¥ng c√≥ l·ªùi)
  - N·∫øu kh√¥ng c√≥ --instr: c·∫ßn ƒë·ªß style, title, prompt (prompt s·∫Ω l√† lyrics)

4. ƒê·ªïi API key:
  /suno apikey <key>

5. Xem l·∫°i help:
  /suno help

L∆∞u √Ω:
- Ch·ªâ d√πng model V3_5, prompt custom: t·ªëi ƒëa 3000 k√Ω t·ª±, style: 200 k√Ω t·ª±, title: 80 k√Ω t·ª±.
- N·∫øu d√πng prompt ƒë∆°n gi·∫£n (kh√¥ng custom), ch·ªâ c·∫ßn <prompt> (t·ªëi ƒëa 400 k√Ω t·ª±).
- callbackUrl l√† n∆°i nh·∫≠n k·∫øt qu·∫£, ƒë·ªÉ m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng bi·∫øt.
`.trim();

module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID } = event;
    if (!args[0] || args[0] === "help") {
        return api.sendMessage(helpText, threadID, messageID);
    }

    // ƒê·ªïi apikey
    if (args[0] === "apikey") {
        if (!args[1]) return api.sendMessage("Vui l√≤ng nh·∫≠p apikey m·ªõi!", threadID, messageID);
        setApiKey(args[1]);
        return api.sendMessage("‚úÖ ƒê√£ c·∫≠p nh·∫≠t apikey Suno th√†nh c√¥ng!", threadID, messageID);
    }

    let apikey = getApiKey();
    if (!apikey) return api.sendMessage("B·∫°n ch∆∞a c·∫•u h√¨nh apikey Suno. D√πng: /suno apikey <key>", threadID, messageID);

    // === L·ªÜNH LYRICS ===
    if (args[0] === "lyrics") {
        // /suno lyrics "lyrics" styles "style" --title ... [--negative ...] [--callback ...]
        let i = 1, lyrics = "", style = "", title = "", negativeTags = undefined, callBackUrl = DEFAULT_CALLBACK;
        // Parse lyrics "..."
        if (args[i]?.startsWith('"')) {
            let tmp = [];
            if (args[i].endsWith('"') && args[i].length > 1) {
                tmp.push(args[i].slice(1, -1)); i++;
            } else {
                tmp.push(args[i].slice(1)); i++;
                while (i < args.length && !args[i].endsWith('"')) { tmp.push(args[i]); i++; }
                if (i < args.length && args[i].endsWith('"')) { tmp.push(args[i].slice(0, -1)); i++; }
            }
            lyrics = tmp.join(" ");
        } else return api.sendMessage("‚ö†Ô∏è ƒê√∫ng c√∫ ph√°p: /suno lyrics \"l·ªùi b√†i h√°t\" styles \"style\" --title ...", threadID, messageID);

        // Parse styles "..."
        if (args[i] !== "styles") return api.sendMessage("‚ö†Ô∏è ƒê√∫ng c√∫ ph√°p: ph·∫£i c√≥ styles \"style\"", threadID, messageID);
        i++;
        if (args[i]?.startsWith('"')) {
            let tmp = [];
            if (args[i].endsWith('"') && args[i].length > 1) {
                tmp.push(args[i].slice(1, -1)); i++;
            } else {
                tmp.push(args[i].slice(1)); i++;
                while (i < args.length && !args[i].endsWith('"')) { tmp.push(args[i]); i++; }
                if (i < args.length && args[i].endsWith('"')) { tmp.push(args[i].slice(0, -1)); i++; }
            }
            style = tmp.join(" ");
        } else return api.sendMessage("‚ö†Ô∏è ƒê√∫ng c√∫ ph√°p: /suno lyrics \"l·ªùi\" styles \"style\" --title ...", threadID, messageID);

        // C√°c option c√≤n l·∫°i
        while (i < args.length) {
            if (args[i] === "--title" && args[i + 1]) { title = args[i + 1]; i += 2; }
            else if (args[i] === "--negative" && args[i + 1]) { negativeTags = args[i + 1]; i += 2; }
            else if (args[i] === "--callback" && args[i + 1]) { callBackUrl = args[i + 1]; i += 2; }
            else i++;
        }
        if (!lyrics || !style || !title) return api.sendMessage("Thi·∫øu lyrics/style/title!", threadID, messageID);

        // Ki·ªÉm tra length
        if (lyrics.length > 3000) return api.sendMessage("Lyrics qu√° d√†i! T·ªëi ƒëa 3000 k√Ω t·ª± cho V3_5.", threadID, messageID);
        if (style.length > 200) return api.sendMessage("Style qu√° d√†i! T·ªëi ƒëa 200 k√Ω t·ª±.", threadID, messageID);
        if (title.length > 80) return api.sendMessage("Title qu√° d√†i! T·ªëi ƒëa 80 k√Ω t·ª±.", threadID, messageID);

        let payload = {
            prompt: lyrics,
            style, title,
            customMode: true,
            instrumental: false,
            model: "V3_5",
            callBackUrl
        };
        if (negativeTags) payload.negativeTags = negativeTags;

        api.sendMessage(`‚è≥ G·ª≠i y√™u c·∫ßu Suno lyrics...\n- Style: ${style}\n- Title: ${title}`, threadID, messageID);
        try {
            const res = await axios.post(
                "https://apibox.erweima.ai/api/v1/generate",
                payload,
                { headers: { Authorization: apikey, "Content-Type": "application/json" } }
            );
            if (res.data.code === 200) {
                api.sendMessage(`üé∂ G·ª≠i lyrics th√†nh c√¥ng!\n- task_id: ${res.data.data.task_id || "?"}\n- ƒê·ª£i callback t·∫°i: ${callBackUrl}`, threadID);
            } else {
                api.sendMessage(`‚ùå L·ªói Suno: ${res.data.msg || "Kh√¥ng r√µ l√Ω do"}`, threadID, messageID);
            }
        } catch (err) {
            if (err.response?.status === 401) {
                api.sendMessage("‚ùå API key Suno h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. D√πng /suno apikey <key> ƒë·ªÉ ƒë·ªïi key m·ªõi.", threadID, messageID);
            } else {
                api.sendMessage("‚ùå L·ªói g·ª≠i Suno: " + (err.response?.data?.msg || err.message), threadID, messageID);
            }
        }
        return;
    }

    // === L·ªÜNH CUSTOM ƒê·∫¶Y ƒê·ª¶ ===
    if (args[0] === "custom") {
        let i = 1, prompt = "", style = "", title = "", instrumental = false, negativeTags = undefined, callBackUrl = DEFAULT_CALLBACK;
        // prompt ho·∫∑c lyrics
        while (i < args.length && !args[i].startsWith('--')) { prompt += (prompt ? " " : "") + args[i]; i++; }
        // parse options
        while (i < args.length) {
            if (args[i] === "--style" && args[i + 1]) { style = args[i + 1]; i += 2; }
            else if (args[i] === "--title" && args[i + 1]) { title = args[i + 1]; i += 2; }
            else if (args[i] === "--instr") { instrumental = true; i++; }
            else if (args[i] === "--negative" && args[i + 1]) { negativeTags = args[i + 1]; i += 2; }
            else if (args[i] === "--callback" && args[i + 1]) { callBackUrl = args[i + 1]; i += 2; }
            else i++;
        }
        if (!style) return api.sendMessage("Thi·∫øu --style <th·ªÉ lo·∫°i>!", threadID, messageID);
        if (!title) return api.sendMessage("Thi·∫øu --title <t√™n b√†i h√°t>!", threadID, messageID);
        if (!instrumental && !prompt) return api.sendMessage("B·∫°n c·∫ßn nh·∫≠p prompt (l·ªùi b√†i h√°t) n·∫øu kh√¥ng instrumental!", threadID, messageID);
        // Ki·ªÉm tra length
        if (prompt.length > 3000) return api.sendMessage("Prompt qu√° d√†i! T·ªëi ƒëa 3000 k√Ω t·ª± cho V3_5.", threadID, messageID);
        if (style.length > 200) return api.sendMessage("Style qu√° d√†i! T·ªëi ƒëa 200 k√Ω t·ª±.", threadID, messageID);
        if (title.length > 80) return api.sendMessage("Title qu√° d√†i! T·ªëi ƒëa 80 k√Ω t·ª±.", threadID, messageID);

        let payload = {
            prompt: prompt || (instrumental ? "" : undefined),
            style, title,
            customMode: true,
            instrumental,
            model: "V3_5",
            callBackUrl
        };
        if (negativeTags) payload.negativeTags = negativeTags;

        api.sendMessage(`‚è≥ G·ª≠i y√™u c·∫ßu Suno custom mode...\n- Style: ${style}\n- Title: ${title}${instrumental ? "\n- Instrumental" : ""}`, threadID, messageID);
        try {
            const res = await axios.post(
                "https://apibox.erweima.ai/api/v1/generate",
                payload,
                { headers: { Authorization: apikey, "Content-Type": "application/json" } }
            );
            if (res.data.code === 200) {
                api.sendMessage(`üé∂ G·ª≠i custom th√†nh c√¥ng!\n- task_id: ${res.data.data.task_id || "?"}\n- ƒê·ª£i callback t·∫°i: ${callBackUrl}`, threadID);
            } else {
                api.sendMessage(`‚ùå L·ªói Suno: ${res.data.msg || "Kh√¥ng r√µ l√Ω do"}`, threadID, messageID);
            }
        } catch (err) {
            if (err.response?.status === 401) {
                api.sendMessage("‚ùå API key Suno h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. D√πng /suno apikey <key> ƒë·ªÉ ƒë·ªïi key m·ªõi.", threadID, messageID);
            } else {
                api.sendMessage("‚ùå L·ªói g·ª≠i Suno: " + (err.response?.data?.msg || err.message), threadID, messageID);
            }
        }
        return;
    }

    // === PROMPT ƒê∆†N GI·∫¢N (kh√¥ng customMode) ===
    let prompt = args.join(" ");
    let callBackUrl = DEFAULT_CALLBACK;
    let negativeTags = undefined;
    // parse th√™m --callback v√† --negative n·∫øu c√≥
    let promptArr = [];
    for (let i = 0; i < args.length; i++) {
        if (args[i] === "--callback" && args[i + 1]) { callBackUrl = args[i + 1]; i++; }
        else if (args[i] === "--negative" && args[i + 1]) { negativeTags = args[i + 1]; i++; }
        else promptArr.push(args[i]);
    }
    prompt = promptArr.join(" ");
    if (!prompt) return api.sendMessage("B·∫°n c·∫ßn nh·∫≠p prompt m√¥ t·∫£ nh·∫°c!", threadID, messageID);
    if (prompt.length > 400) return api.sendMessage("Prompt qu√° d√†i! Ch·ªâ 400 k√Ω t·ª± ·ªü ch·∫ø ƒë·ªô th∆∞·ªùng.", threadID, messageID);

    let payload = {
        prompt,
        customMode: false,
        instrumental: false,
        model: "V3_5",
        callBackUrl
    };
    if (negativeTags) payload.negativeTags = negativeTags;

    api.sendMessage("‚è≥ ƒêang g·ª≠i y√™u c·∫ßu t·∫°o nh·∫°c Suno V3_5...", threadID, messageID);
    try {
        const res = await axios.post(
            "https://apibox.erweima.ai/api/v1/generate",
            payload,
            { headers: { Authorization: apikey, "Content-Type": "application/json" } }
        );
        if (res.data.code === 200) {
            api.sendMessage(`üéµ ƒê√£ g·ª≠i y√™u c·∫ßu t·∫°o nh·∫°c Suno th√†nh c√¥ng!\n- task_id: ${res.data.data.task_id || "?"}\n- ƒê·ª£i callback t·∫°i: ${callBackUrl}`, threadID);
        } else {
            api.sendMessage(`‚ùå L·ªói t·∫°o nh·∫°c Suno: ${res.data.msg || "Kh√¥ng r√µ l√Ω do"}`, threadID, messageID);
        }
    } catch (err) {
        if (err.response?.status === 401) {
            api.sendMessage("‚ùå API key Suno h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. D√πng /suno apikey <key> ƒë·ªÉ ƒë·ªïi key m·ªõi.", threadID, messageID);
        } else {
            api.sendMessage("‚ùå L·ªói g·ª≠i y√™u c·∫ßu Suno: " + (err.response?.data?.msg || err.message), threadID, messageID);
        }
    }
};