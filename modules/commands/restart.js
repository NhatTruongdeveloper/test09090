module.exports.config = {
	name: "restart",
	version: "2.0.0",
	hasPermssion: 3,
	credits: "Chill with Tea, c·∫£i ti·∫øn Kenne401k",
	description: "Kh·ªüi ƒë·ªông l·∫°i Bot v√† th√¥ng b√°o khi l√™n l·∫°i",
	commandCategory: "Admin",
	usages: "[gi√¢y]",
	cooldowns: 5
};

const fs = require("fs");
const path = require("path");
const moment = require("moment-timezone");
const restartNotifyPath = path.join(__dirname, "../../cache/restart_notify.json");

function getThuVN(thu) {
	switch (thu) {
		case "Sunday": return "Ch·ªß Nh·∫≠t";
		case "Monday": return "Th·ª© Hai";
		case "Tuesday": return "Th·ª© Ba";
		case "Wednesday": return "Th·ª© T∆∞";
		case "Thursday": return "Th·ª© NƒÉm";
		case "Friday": return "Th·ª© S√°u";
		case "Saturday": return "Th·ª© B·∫£y";
		default: return thu;
	}
}

module.exports.run = async ({ api, event, args }) => {
	const { threadID, messageID, senderID } = event;
	const { commands } = global.client;
	const adminIDs = global.config.ADMINBOT || [];
	if (!adminIDs.includes(senderID))
		return api.sendMessage("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", threadID, messageID);

	// X√°c ƒë·ªãnh th·ªùi gian ƒë·∫øm ng∆∞·ª£c restart
	let rstime = parseInt(args[0], 10);
	if (isNaN(rstime) || rstime < 1) rstime = 5;

	// L∆∞u notify ƒë·ªÉ khi bot l√™n l·∫°i s·∫Ω g·ª≠i cho admin ƒë√£ restart
	const restartNotify = {
		threadID,
		senderID,
		time: Date.now()
	};
	try {
		fs.writeFileSync(restartNotifyPath, JSON.stringify(restartNotify, null, 2), "utf8");
	} catch (e) { /* B·ªè qua l·ªói ghi file */ }

	const now = moment.tz("Asia/Ho_Chi_Minh");
	const thuVN = getThuVN(now.format("dddd"));

	api.sendMessage(
		`üîÑ ƒêang chu·∫©n b·ªã kh·ªüi ƒë·ªông l·∫°i bot...\n‚Üí Th·ªùi gian: ${now.format("HH:mm:ss - DD/MM/YYYY")} - ${thuVN}\n‚Üí T·ªïng l·ªánh hi·ªán t·∫°i: ${commands.size} l·ªánh\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n[ùóïùóºùòÅ] ‚Üí S·∫Ω kh·ªüi ƒë·ªông l·∫°i sau ${rstime} gi√¢y n·ªØa.`,
		threadID
	);

	setTimeout(() => {
		api.sendMessage("[ùóïùóºùòÅ] ‚Üí Ti·∫øn h√†nh kh·ªüi ƒë·ªông l·∫°i!", threadID, () => process.exit(1));
	}, rstime * 1000);
};


// ====== Th√™m v√†o code kh·ªüi ƒë·ªông bot (v√≠ d·ª• ·ªü listen.js ho·∫∑c main.js) ======
/*
const fs = require("fs");
const path = require("path");
const restartNotifyPath = path.join(__dirname, "cache/restart_notify.json");
setTimeout(async () => {
	try {
		if (fs.existsSync(restartNotifyPath)) {
			const notify = JSON.parse(fs.readFileSync(restartNotifyPath, "utf8"));
			const { threadID, senderID, time } = notify;
			const moment = require("moment-timezone");
			const now = moment.tz("Asia/Ho_Chi_Minh");
			const msg = `‚úÖ [BOT ƒê√É KH·ªûI ƒê·ªòNG L·∫†I]\n‚Üí Th·ªùi gian: ${now.format("HH:mm:ss - DD/MM/YYYY")}\n‚Üí G·ª≠i b·ªüi Admin: https://facebook.com/${senderID}\n‚Üí Uptime: ${(Math.floor(process.uptime()))} gi√¢y`;
			global.client.api.sendMessage(msg, threadID);
			fs.unlinkSync(restartNotifyPath);
		}
	} catch (e) { /* b·ªè qua l·ªói *\/ }
}, 5000);
// ====== K·∫øt th√∫c ph·∫ßn b·ªï sung ======
*/